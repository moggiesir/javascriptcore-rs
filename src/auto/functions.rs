// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_24", feature = "dox"))]
use glib::GString;
use glib::translate::*;
use javascriptcore_sys;
#[cfg(any(feature = "v2_24", feature = "dox"))]
use std::mem;
#[cfg(any(feature = "v2_24", feature = "dox"))]
use std::ptr;


pub fn get_major_version() -> u32 {
    assert_initialized_main_thread!();
    unsafe {
        javascriptcore_sys::jsc_get_major_version()
    }
}

pub fn get_micro_version() -> u32 {
    assert_initialized_main_thread!();
    unsafe {
        javascriptcore_sys::jsc_get_micro_version()
    }
}

pub fn get_minor_version() -> u32 {
    assert_initialized_main_thread!();
    unsafe {
        javascriptcore_sys::jsc_get_minor_version()
    }
}

//#[cfg(any(feature = "v2_24", feature = "dox"))]
//pub fn options_foreach(function: /*Unimplemented*/FnMut(&str, /*Ignored*/OptionType, Option<&str>) -> bool, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
//    unsafe { TODO: call javascriptcore_sys:jsc_options_foreach() }
//}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_boolean(option: &str) -> Option<bool> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = mem::uninitialized();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_boolean(option.to_glib_none().0, &mut value));
        if ret { Some(from_glib(value)) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_double(option: &str) -> Option<f64> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = mem::uninitialized();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_double(option.to_glib_none().0, &mut value));
        if ret { Some(value) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_int(option: &str) -> Option<i32> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = mem::uninitialized();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_int(option.to_glib_none().0, &mut value));
        if ret { Some(value) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_range_string(option: &str) -> Option<GString> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = ptr::null_mut();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_range_string(option.to_glib_none().0, &mut value));
        if ret { Some(from_glib_full(value)) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_size(option: &str) -> Option<usize> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = mem::uninitialized();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_size(option.to_glib_none().0, &mut value));
        if ret { Some(value) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_string(option: &str) -> Option<GString> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = ptr::null_mut();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_string(option.to_glib_none().0, &mut value));
        if ret { Some(from_glib_full(value)) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_get_uint(option: &str) -> Option<u32> {
    assert_initialized_main_thread!();
    unsafe {
        let mut value = mem::uninitialized();
        let ret = from_glib(javascriptcore_sys::jsc_options_get_uint(option.to_glib_none().0, &mut value));
        if ret { Some(value) } else { None }
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_boolean(option: &str, value: bool) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_boolean(option.to_glib_none().0, value.to_glib()))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_double(option: &str, value: f64) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_double(option.to_glib_none().0, value))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_int(option: &str, value: i32) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_int(option.to_glib_none().0, value))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_range_string(option: &str, value: &str) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_range_string(option.to_glib_none().0, value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_size(option: &str, value: usize) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_size(option.to_glib_none().0, value))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_string(option: &str, value: &str) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_string(option.to_glib_none().0, value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v2_24", feature = "dox"))]
pub fn options_set_uint(option: &str, value: u32) -> bool {
    assert_initialized_main_thread!();
    unsafe {
        from_glib(javascriptcore_sys::jsc_options_set_uint(option.to_glib_none().0, value))
    }
}
