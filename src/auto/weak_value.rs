// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use javascriptcore_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct WeakValue(Object<javascriptcore_sys::JSCWeakValue, javascriptcore_sys::JSCWeakValueClass, WeakValueClass>);

    match fn {
        get_type => || javascriptcore_sys::jsc_weak_value_get_type(),
    }
}

impl WeakValue {
    pub fn new<P: IsA<Value>>(value: &P) -> WeakValue {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_weak_value_new(value.as_ref().to_glib_none().0))
        }
    }
}

pub const NONE_WEAK_VALUE: Option<&WeakValue> = None;

pub trait WeakValueExt: 'static {
    fn get_value(&self) -> Option<Value>;

    fn connect_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WeakValue>> WeakValueExt for O {
    fn get_value(&self) -> Option<Value> {
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_weak_value_get_value(self.as_ref().to_glib_none().0))
        }
    }

    fn connect_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cleared_trampoline<P, F: Fn(&P) + 'static>(this: *mut javascriptcore_sys::JSCWeakValue, f: glib_sys::gpointer)
            where P: IsA<WeakValue>
        {
            let f: &F = &*(f as *const F);
            f(&WeakValue::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cleared\0".as_ptr() as *const _,
                Some(transmute(cleared_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for WeakValue {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WeakValue")
    }
}
