// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Context;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use javascriptcore_sys;
use std::fmt;

glib_wrapper! {
    pub struct Exception(Object<javascriptcore_sys::JSCException, javascriptcore_sys::JSCExceptionClass, ExceptionClass>);

    match fn {
        get_type => || javascriptcore_sys::jsc_exception_get_type(),
    }
}

impl Exception {
    pub fn new<P: IsA<Context>>(context: &P, message: &str) -> Exception {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_exception_new(context.as_ref().to_glib_none().0, message.to_glib_none().0))
        }
    }

    pub fn new_with_name<P: IsA<Context>>(context: &P, name: &str, message: &str) -> Exception {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_exception_new_with_name(context.as_ref().to_glib_none().0, name.to_glib_none().0, message.to_glib_none().0))
        }
    }
}

pub const NONE_EXCEPTION: Option<&Exception> = None;

pub trait ExceptionExt: 'static {
    fn get_backtrace_string(&self) -> Option<GString>;

    fn get_column_number(&self) -> u32;

    fn get_line_number(&self) -> u32;

    fn get_message(&self) -> Option<GString>;

    fn get_name(&self) -> Option<GString>;

    fn get_source_uri(&self) -> Option<GString>;

    fn report(&self) -> Option<GString>;

    fn to_string(&self) -> GString;
}

impl<O: IsA<Exception>> ExceptionExt for O {
    fn get_backtrace_string(&self) -> Option<GString> {
        unsafe {
            from_glib_none(javascriptcore_sys::jsc_exception_get_backtrace_string(self.as_ref().to_glib_none().0))
        }
    }

    fn get_column_number(&self) -> u32 {
        unsafe {
            javascriptcore_sys::jsc_exception_get_column_number(self.as_ref().to_glib_none().0)
        }
    }

    fn get_line_number(&self) -> u32 {
        unsafe {
            javascriptcore_sys::jsc_exception_get_line_number(self.as_ref().to_glib_none().0)
        }
    }

    fn get_message(&self) -> Option<GString> {
        unsafe {
            from_glib_none(javascriptcore_sys::jsc_exception_get_message(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(javascriptcore_sys::jsc_exception_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_source_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(javascriptcore_sys::jsc_exception_get_source_uri(self.as_ref().to_glib_none().0))
        }
    }

    fn report(&self) -> Option<GString> {
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_exception_report(self.as_ref().to_glib_none().0))
        }
    }

    fn to_string(&self) -> GString {
        unsafe {
            from_glib_full(javascriptcore_sys::jsc_exception_to_string(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Exception {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Exception")
    }
}
